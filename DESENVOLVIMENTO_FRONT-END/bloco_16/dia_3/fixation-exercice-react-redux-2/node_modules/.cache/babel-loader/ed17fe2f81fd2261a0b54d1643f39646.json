{"ast":null,"code":"const INITIAL_STATE = {\n  // Setamos o nosso stado inicial como um array vazio.\n  cartItems: []\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  // Como padrão passamos para o reducer o state e a action.\n  switch (action.type) {\n    // Usamos o Switch para tratar os casos das actions.\n    case 'ADD_ITEM_TO_CART':\n      return { ...state,\n        // Usamos o spread para conservar os outros dados do store que não iremos mudar nesse momento.\n        cartItems: state.cartItems.concat(action.payload.item) // Aqui fazemos uma concatenação dos dados que já existem no cartItems com os novos da action.\n\n      };\n    // Uma coisa muito importante a ser frisada, nunca podemos alterar o state diretamente, sempre usaremos metodos como o concat que cria um novo array/objeto e atribuimos a nossa key do store.\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/afonso/Documents/trybe_exercises/DESENVOLVIMENTO_FRONT-END/bloco_16/dia_3/fixation-exercice-react-redux-2/src/reducers/cartReducer.js"],"names":["INITIAL_STATE","cartItems","reducer","state","action","type","concat","payload","item"],"mappings":"AAAA,MAAMA,aAAa,GAAG;AAAE;AACtBC,EAAAA,SAAS,EAAE;AADS,CAAtB;;AAIA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGH,aAAT,EAAwBI,MAAxB,KAAmC;AAAE;AACnD,UAAQA,MAAM,CAACC,IAAf;AAAuB;AACvB,SAAK,kBAAL;AACE,aAAO,EACL,GAAGF,KADE;AACK;AACVF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBK,MAAhB,CAAuBF,MAAM,CAACG,OAAP,CAAeC,IAAtC,CAFN,CAEmD;;AAFnD,OAAP;AAGG;;AACL;AACE,aAAOL,KAAP;AAPF;AASD,CAVD;;AAYA,eAAeD,OAAf","sourcesContent":["const INITIAL_STATE = { // Setamos o nosso stado inicial como um array vazio.\n  cartItems: [],\n};\n\nconst reducer = (state = INITIAL_STATE, action) => { // Como padrão passamos para o reducer o state e a action.\n  switch (action.type) { // Usamos o Switch para tratar os casos das actions.\n  case 'ADD_ITEM_TO_CART':\n    return {\n      ...state, // Usamos o spread para conservar os outros dados do store que não iremos mudar nesse momento.\n      cartItems: state.cartItems.concat(action.payload.item), // Aqui fazemos uma concatenação dos dados que já existem no cartItems com os novos da action.\n    }; // Uma coisa muito importante a ser frisada, nunca podemos alterar o state diretamente, sempre usaremos metodos como o concat que cria um novo array/objeto e atribuimos a nossa key do store.\n  default:\n    return state;\n  }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}