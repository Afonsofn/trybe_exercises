{"ast":null,"code":"var _jsxFileName = \"/home/afonso/Documents/trybe_exercises/DESENVOLVIMENTO_FRONT-END/bloco_16/dia_3/fixation-exercice-react-redux-3/src/components/LogInPage.js\";\nimport React from 'react';\nimport { connect } from 'react-redux'; // Importamos o conect par conectar o React com o Redux.\n\nimport login from '../actions/index'; // Importamos a action para fazermos os dispatchs.\n\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LogInPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateRegister = () => {\n      // pq esse modo de function funcionou e esse nao => validateRegister() {}\n      const {\n        // Aqui temos a função que recupera os dados do state local.\n        email,\n        senha\n      } = this.state;\n      this.props.login({\n        // Depois fazemos um dispatch com esses dados para a store através do addRegister que setamos no mapDispatchToProps.\n        email,\n        senha\n      });\n      this.setState({\n        // E por fim limpamos o state para um novo Form.\n        email: '',\n        senha: ''\n      });\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      // Setamos um state local para depois mandarmos o todas as informações referente a esse form de uam vez só.\n      email: '',\n      senha: ''\n    };\n  }\n\n  handleChange(event) {\n    // Uma função com a lógica de subir os dados dos inputs para o state.\n    let {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"email\",\n          type: \"text\",\n          maxLength: \"50\",\n          placeholder: \"email\",\n          value: this.state.email,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Senha:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"senha\",\n          type: \"passowrd\",\n          placeholder: \"senha\",\n          maxLength: \"50\",\n          value: this.state.senha,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.validateRegister,\n        children: \"Entrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  // O mapDispatchToProps disponibiliza as actions para usarmos no componente através de props.\n  login: formulario => dispatch( // Setamos a key para chamarmos através das props.\n  login(formulario) // E colocamos a action para ser usada através da key pelas props.\n  )\n});\n\nexport default connect(null, mapDispatchToProps)(LogInPage); // Passamos o connect no export para unirmos o store ao component.","map":{"version":3,"sources":["/home/afonso/Documents/trybe_exercises/DESENVOLVIMENTO_FRONT-END/bloco_16/dia_3/fixation-exercice-react-redux-3/src/components/LogInPage.js"],"names":["React","connect","login","Link","LogInPage","Component","constructor","props","validateRegister","email","senha","state","setState","handleChange","bind","event","name","value","target","render","mapDispatchToProps","dispatch","formulario"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAAuC;;AACvC,OAAOC,KAAP,MAAkB,kBAAlB,C,CAAsC;;AACtC,SAASC,IAAT,QAAqB,kBAArB;;;AAEA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAmBnBC,gBAnBmB,GAmBA,MAAM;AAAG;AAC1B,YAAM;AAAE;AACNC,QAAAA,KADI;AAEJC,QAAAA;AAFI,UAGD,KAAKC,KAHV;AAKA,WAAKJ,KAAL,CAAWL,KAAX,CAAiB;AAAG;AAClBO,QAAAA,KADe;AAEfC,QAAAA;AAFe,OAAjB;AAKA,WAAKE,QAAL,CAAc;AAAE;AACdH,QAAAA,KAAK,EAAE,EADK;AAEZC,QAAAA,KAAK,EAAE;AAFK,OAAd;AAID,KAlCkB;;AAGjB,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AAEA,SAAKH,KAAL,GAAa;AAAG;AACdF,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb;AAID;;AAEDG,EAAAA,YAAY,CAACE,KAAD,EAAQ;AAAE;AACpB,QAAI;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,MAA5B;AAEA,SAAKN,QAAL,CAAc;AACV,OAACI,IAAD,GAAQC;AADE,KAAd;AAGD;;AAmBDE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA,0CAEI;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,SAAS,EAAC,IAHZ;AAIE,UAAA,WAAW,EAAC,OAJd;AAKE,UAAA,KAAK,EAAE,KAAKR,KAAL,CAAWF,KALpB;AAME,UAAA,QAAQ,EAAE,KAAKI;AANjB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAYI;AAAA,0CAEE;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,WAAW,EAAC,OAHd;AAIE,UAAA,SAAS,EAAC,IAJZ;AAKE,UAAA,KAAK,EAAE,KAAKF,KAAL,CAAWD,KALpB;AAME,UAAA,QAAQ,EAAE,KAAKG;AANjB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ,eAuBI;AAAQ,QAAA,OAAO,EAAE,KAAKL,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA2BD;;AAjEqC;;AAoExC,MAAMY,kBAAkB,GAAGC,QAAQ,KAAK;AAAE;AACxCnB,EAAAA,KAAK,EAAGoB,UAAD,IAAgBD,QAAQ,EAAE;AAC/BnB,EAAAA,KAAK,CAACoB,UAAD,CADwB,CACX;AADW;AADO,CAAL,CAAnC;;AAMA,eAAerB,OAAO,CAAC,IAAD,EAAOmB,kBAAP,CAAP,CAAkChB,SAAlC,CAAf,C,CAA6D","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'; // Importamos o conect par conectar o React com o Redux.\nimport login from '../actions/index'; // Importamos a action para fazermos os dispatchs.\nimport { Link } from 'react-router-dom';\n\nclass LogInPage extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleChange = this.handleChange.bind(this)\n\n    this.state = {  // Setamos um state local para depois mandarmos o todas as informações referente a esse form de uam vez só.\n      email: '',\n      senha: '',\n    }\n  }\n\n  handleChange(event) { // Uma função com a lógica de subir os dados dos inputs para o state.\n    let { name, value } = event.target\n\n    this.setState({\n        [name]: value\n    })\n  }\n\n  validateRegister = () => {  // pq esse modo de function funcionou e esse nao => validateRegister() {}\n    const { // Aqui temos a função que recupera os dados do state local.\n      email,\n      senha,\n     } = this.state;\n\n    this.props.login({  // Depois fazemos um dispatch com esses dados para a store através do addRegister que setamos no mapDispatchToProps.\n      email,\n      senha,\n     });\n     \n    this.setState({ // E por fim limpamos o state para um novo Form.\n      email: '',\n      senha: '',\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <label>\n            Email:\n            <input\n              name=\"email\"\n              type=\"text\"\n              maxLength=\"50\"\n              placeholder=\"email\"\n              value={this.state.email}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label>\n            Senha:\n            <input\n              name=\"senha\"\n              type=\"passowrd\"\n              placeholder=\"senha\"\n              maxLength=\"50\"\n              value={this.state.senha}\n              onChange={this.handleChange}\n            />\n          </label>\n          <button onClick={this.validateRegister}>Entrar</button>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({ // O mapDispatchToProps disponibiliza as actions para usarmos no componente através de props.\n  login: (formulario) => dispatch( // Setamos a key para chamarmos através das props.\n    login(formulario) // E colocamos a action para ser usada através da key pelas props.\n  )\n});\n\nexport default connect(null, mapDispatchToProps)(LogInPage); // Passamos o connect no export para unirmos o store ao component."]},"metadata":{},"sourceType":"module"}